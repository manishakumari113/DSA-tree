#include<stdio.h>
#include<stdlib.h>
struct node
{
    struct node *left;
    int info;
    struct node *right;
};
struct node *root=NULL;

void create_BST()
{
    struct node *ptr;
    int n;
    printf("Enter the no. of nodes:");
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        struct node *newnode=(struct node *)malloc(sizeof(struct node));
        printf("Enter newnode info:");
        scanf("%d",&newnode->info);
        newnode->left=NULL;
        newnode->right=NULL;
        if(root==NULL)
        {
            root=newnode;
}
        else
        {
            //struct node *ptr;
            ptr=root;
            while(ptr!=NULL)
            {
                if(newnode->info > ptr->info)
                {
                    if(ptr->right==NULL)
                    {
                        ptr->right=newnode;
                        break;
                    }
                    else
                    {
                        ptr=ptr->right;
                    }
                }
                else
                {
                    if(ptr->left==NULL)
                    {
                        ptr->left=newnode;
                        break;
                    }
                    else
                   {
                        ptr=ptr->left;
                    }
                }
            }
        }
    }
}
void preorder(struct node *ptr)
{
    if(ptr!=NULL)
    {
        printf("%d ",ptr->info);
        preorder(ptr->left);
        preorder(ptr->right);
    }
}
void postorder(struct node *ptr)
{
    if(ptr!=NULL)
    {
        postorder(ptr->left);
        postorder(ptr->right);
printf("%d ",ptr->info);
    }
}
void inorder(struct node *ptr)
{
    if(ptr!=NULL)
    {
        inorder(ptr->left);
        printf("%d ",ptr->info);
        inorder(ptr->right);
    }
}
int getleafcount( struct node *ptr)
{
    if(ptr==NULL)
    {
    return 0;
    }
    if(ptr->left==NULL && ptr->right==NULL)
    {
    return 1;
    }
    else
    {
        return (getleafcount(ptr->left)+getleafcount(ptr->right));
    }
}
int countNonleaf(struct node*ptr)
{
    if (ptr == NULL || (ptr->left == NULL &&
                         ptr->right == NULL))
        return 0;
    return 1 + countNonleaf(ptr->left) +
               countNonleaf(ptr->right);
}
int countnodes(struct node *ptr)
{
    int count=0;
    if(ptr != NULL)
    {
        countnodes(ptr->left);
        count++;
        countnodes(ptr->right);
    }
    return count;
}
int sumofnodes(struct node *ptr)
{
    int rightsubtree, leftsubtree, sum = 0;
    if(ptr != NULL)
    {
        leftsubtree = sumofnodes(ptr->left);
        rightsubtree = sumofnodes(ptr->right);
        sum = (ptr->info) + leftsubtree + rightsubtree;
        return sum;
    }
}
int main ()  
{  
    int choice;     
   printf("\n1.CREATE\n2.PREORDER\n3.POSTORDER\n4.INORDER\n5.NO OF LEAF NODES\n6.NO.NON-LEAF NODES\n7.NO. OF NODES IN BST\n8.SUM OF NODES 9.QUIT");
    do
    {
        printf("\n Enter the Choice:");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:
            {
                create_BST();
                break;
            }
            case 2:
            {
                preorder(root);
                break;
            }
            case 3:
            {
                postorder(root);
                break;
            }
            case 4:
            {
               inorder(root);
                break;
            }
            case 5:
            {
              printf("Leaf count of the tree is %d",getleafcount(root));
              getchar();
              
                break;
                
            }
            case 6:
            {
              printf("non leaf count of the tree is%d ",countNonleaf(root));
                break;
            }
            case 7:
            {
              printf("Number of nodes in tree = %d ",countnodes(root));
              break;
            }
            case 8:
            {
               printf("Sum of nodes in tree = %d", sumofnodes(root));
                break;
            }
            case 9:
            {
                printf("\nquit");
                break;
                return 0;
            }
            default:
            {
                printf ("\n Enter a Valid Choice(1/2/3/4/5)");
            } 
        }
    }
    while(choice!=9);
    return 0;
}
